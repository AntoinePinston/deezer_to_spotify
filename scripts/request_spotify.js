function get_user_id(token) {
    return new Promise(function(resolve) {

        fetch('https://api.spotify.com/v1/me', {
            headers: {
                'Authorization': 'Bearer ' + token
            }
        }).then(response => response.json()).then(response => resolve(response.id))
    })
}

function createPlaylist(token, userId, namePlaylist) {
    return new Promise(function(resolve) {
        const baseURL = "https://api.spotify.com/v1/users/" + userId + "/playlists";
        const headers = {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
        };
        const body = JSON.stringify({
            "name": namePlaylist,
            "description": "generated by deezer to spotify",
            "public": false,
        })

        const options = {
            method: 'POST',
            headers: headers,
            body: body
        };
        fetch(baseURL, options).then(response => response.json()).then(response => resolve(response.id))
    })
}

async function getBase64String(pathIcon) {
    const response = await fetch(pathIcon); // Use fetch instead of XHR for browser compatibility and potential benefits
  
    if (!response.ok) {
      throw new Error(`HTTP error ${response.status}`);
    }
  
    const blob = await response.blob();
    const reader = new FileReader();
    const base64String = await new Promise((resolve, reject) => {
      reader.onload = () => resolve(reader.result.split(',')[1]);
      reader.onerror = reject;
      reader.readAsDataURL(blob);
    });
  
    return base64String;
  }

async function editIcon(token, playlistID, pathIcon) {
    return new Promise(async function(resolve) {
        const baseURL = "https://api.spotify.com/v1/playlists/" + playlistID + "/images";
        const headers = {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'image/jpeg'
        };

        var base64String = await getBase64String(pathIcon)
        console.log(base64String);

        const options = {
            method: 'PUT',
            headers: headers,
            body: base64String
        };

        fetch(baseURL, options).then(resolve())
    })
}

async function fill_playlist(token, playlistID, tracks) {
    let res_tracks = [];

    for (const track of tracks) {
        let t = await find_track(track, token);
        res_tracks.push(t);
    }
    for (let i = 0; i < res_tracks.length; i += 99) {
        const tracks = res_tracks.slice(i, i + 99);
        await add_tracks_playlist(token, playlistID, tracks);
        await new Promise(resolve => setTimeout(resolve, 500));
    }
}

function find_track(track, token) {
    return new Promise(function(resolve) {
        url = 'https://api.spotify.com/v1/search?q='
        if (track.artist.name != null) {
            url += `${track.artist.name}`
        }
        if (track.title != null || track.title != '') {
            url += `%20${track.title}`
        }

        url += "&type=track&limit=1"
        var options = {
            headers: {
                'Authorization': 'Bearer ' + token
            },
        }
        fetch(url, options)
        .then(response => response.json())
        .then(response => {
            if (response.tracks != null) {
                // we get the first hit on the search
                resolve(response.tracks.items[0])
            }
            else {
                console.log("Unknown title", track.title)
            }
        })
    })
}

function add_tracks_playlist(token, playlist_id, tracks) {
    // Should be less than 100 tracks
    return new Promise(function(resolve) {
        const url = `https://api.spotify.com/v1/playlists/${playlist_id}/tracks`;
        const headers = {
            'Authorization': 'Bearer ' + token,
            'Content-Type': 'application/json',
        };

        const data = {
            uris: [],
        };

        for (let i = 0; i < tracks.length; i++) {
            if (tracks[i] != null) {
                // security
                data.uris.push(`spotify:track:${tracks[i].id}`);
            }
        }

        const options = {
            method: 'POST',
            headers: headers,
            body: JSON.stringify(data),
        };

        fetch(url, options);
        resolve();
    });
}